name: Processar Coment√°rios

on:
  repository_dispatch:
    types: [new-comment, new-suggestion]
  workflow_dispatch:
    inputs:
      test:
        description: 'Teste manual do workflow'
        required: false
        default: 'false'
      username:
        description: 'Nome do usu√°rio (teste)'
        required: false
        default: 'Usuario Teste'
      comment:
        description: 'Coment√°rio (teste)'
        required: false
        default: 'Este √© um coment√°rio de teste!'
      rating:
        description: 'Avalia√ß√£o (teste)'
        required: false
        default: '5'

jobs:
  process-comment:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Debug - Mostrar evento recebido
      run: |
        echo "Tipo de evento: ${{ github.event.action }}"
        echo "Event name: ${{ github.event_name }}"
        echo "Dados recebidos:"
        echo '${{ toJson(github.event.client_payload) }}'
        echo "Inputs (se workflow_dispatch):"
        echo '${{ toJson(github.event.inputs) }}'
        
    - name: Processar novo coment√°rio
      if: github.event.action == 'new-comment' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test == 'false')
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_CLASSIC }}
        DISCUSSION_ID: "D_kwDONItOJ84AtXqV"
      run: |
        echo "Processando coment√°rio..."
        
        # Definir vari√°veis baseadas no tipo de evento
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          USERNAME="${{ github.event.client_payload.username }}"
          COMMENT="${{ github.event.client_payload.comment }}"
          RATING="${{ github.event.client_payload.rating }}"
        else
          USERNAME="${{ github.event.inputs.username }}"
          COMMENT="${{ github.event.inputs.comment }}"  
          RATING="${{ github.event.inputs.rating }}"
        fi
        
        echo "Usu√°rio: $USERNAME"
        echo "Avalia√ß√£o: $RATING/5 estrelas"
        echo "Coment√°rio: $COMMENT"
        
        # Verificar se o token existe
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "‚ùå ERRO: Token TOKEN_CLASSIC n√£o encontrado!"
          echo "Configure o secret no reposit√≥rio."
          exit 1
        fi
        
        echo "‚úÖ Token encontrado!"
        
        # Preparar corpo do coment√°rio
        COMMENT_BODY="üë§ **$USERNAME**

‚≠ê **Avalia√ß√£o:** $RATING/5 estrelas

üí¨ **Coment√°rio:**
$COMMENT

---
*Enviado via sistema de coment√°rios autom√°tico em $(date)*"
        
        echo "Enviando para GitHub Discussions..."
        
        # Enviar para GitHub Discussions usando GraphQL
        response=$(curl -s -w "%{http_code}" \
          -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.github.v3+json" \
          -d "{
            \"query\": \"mutation { addDiscussionComment(input: { discussionId: \\\"$DISCUSSION_ID\\\", body: \\\"$(echo "$COMMENT_BODY" | sed 's/"/\\"/g' | tr '\n' ' ')\\\" }) { comment { id url } } }\"
          }" \
          https://api.github.com/graphql)
        
        http_code=${response: -3}
        response_body=${response%???}
        
        echo "C√≥digo HTTP: $http_code"
        echo "Resposta: $response_body"
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Coment√°rio enviado com sucesso para GitHub Discussions!"
        else
          echo "‚ùå Erro ao enviar coment√°rio:"
          echo "Poss√≠veis causas:"
          echo "- Token sem permiss√£o 'write:discussion'"
          echo "- Discussion ID incorreto"
          echo "- Discussions n√£o ativadas"
        fi

    - name: Processar nova sugest√£o
      if: github.event.action == 'new-suggestion'
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_CLASSIC }}
        DISCUSSION_ID: "D_kwDONItOJ84AtXqY"
      run: |
        echo "Processando sugest√£o..."
        echo "Usu√°rio: ${{ github.event.client_payload.username }}"
        echo "T√≠tulo: ${{ github.event.client_payload.title }}"
        echo "Sugest√£o: ${{ github.event.client_payload.suggestion }}"
        
        # Preparar corpo da sugest√£o
        SUGGESTION_BODY="üë§ **${{ github.event.client_payload.username }}**

üìù **${{ github.event.client_payload.title }}**

üí° **Sugest√£o:**
${{ github.event.client_payload.suggestion }}

---
*Enviado via sistema de sugest√µes autom√°tico em $(date)*"
        
        echo "Enviando sugest√£o para GitHub Discussions..."
        
        # Enviar para GitHub Discussions usando GraphQL
        response=$(curl -s -w "%{http_code}" \
          -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.github.v3+json" \
          -d "{
            \"query\": \"mutation { addDiscussionComment(input: { discussionId: \\\"$DISCUSSION_ID\\\", body: \\\"$(echo "$SUGGESTION_BODY" | sed 's/"/\\"/g' | tr '\n' ' ')\\\" }) { comment { id url } } }\"
          }" \
          https://api.github.com/graphql)
        
        http_code=${response: -3}
        echo "C√≥digo HTTP: $http_code"
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Sugest√£o enviada com sucesso!"
        else
          echo "‚ùå Erro ao enviar sugest√£o"
        fi
          
    - name: Log de confirma√ß√£o
      run: |
        echo "‚úÖ Processamento conclu√≠do!"
        echo "Timestamp: $(date)"
        echo "Evento processado: ${{ github.event.action }}"
